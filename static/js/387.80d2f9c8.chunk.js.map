{"version":3,"file":"static/js/387.80d2f9c8.chunk.js","mappings":"qPACaA,EAAWC,EAAAA,GAAAA,GAAH,0IAQRC,EAAWD,EAAAA,GAAAA,GAAH,0JAORE,EAAYF,EAAAA,GAAAA,GAAH,uIAQTG,EAAWH,EAAAA,GAAAA,EAAH,4I,SC2BrB,EA/CiB,WACf,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAWR,OATAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBH,GACbI,KAAKL,GACLM,OAAM,SAAAC,GACLC,QAAQD,MAAMA,GACdP,EAAQ,GACT,GACJ,GAAE,CAACC,KAGF,SAACR,EAAD,UACGM,EAAKU,KAAI,YAAqD,IAAlDC,EAAiD,EAAjDA,GAAIC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UACxCC,EAAQ,0CAAsCH,GAClD,IACE,OACE,UAAChB,EAAD,WACGgB,GACC,gBACEI,IAAKD,EACLE,IAAKJ,EACLK,MAAM,MACNC,OAAO,SAGT,gBACEH,IAAI,sGACJC,IAAKJ,EACLK,MAAM,MACNC,OAAO,SAGX,SAACtB,EAAD,UAAYgB,KACZ,UAACf,EAAD,yBAAsBgB,OAjBTH,EAuBlB,CAHC,MAAOH,GAEP,OADAC,QAAQD,MAAMA,GACP,IACR,CACF,KAGN,C,+LCjDKY,EAAM,mCAGL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,qGACkBC,EAAAA,EAAAA,GAAM,mBAAoB,CAC/CC,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,MANX,kEASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAmCC,GAAnC,wFACkBN,EAAAA,EAAAA,GAAM,sBAAD,OAAuBM,GAAS,CAC1DL,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,MANX,kEASA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BlB,GAA/B,wFACkBW,EAAAA,EAAAA,GAAM,SAAD,OAAUX,GAAM,CAC1CY,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,MANX,kEAQA,SAAerB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BM,GAA/B,wFACkBW,EAAAA,EAAAA,GAAM,SAAD,OAAUX,EAAV,aAAyB,CACnDY,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,KAAK1B,MANhB,kEAQA,SAAe8B,EAAtB,+CAAO,OAAP,oBAAO,WAAiCnB,GAAjC,wFACkBW,EAAAA,EAAAA,GAAM,SAAD,OAAUX,EAAV,aAAyB,CACnDY,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,MANX,kEApCPJ,EAAAA,EAAAA,SAAAA,QAAyB,+B","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/moviesAPI.jsx"],"sourcesContent":["import styled from \"styled-components\";\nexport const CastList = styled.ul`\nmargin-left: 40px;\ndisplay: flex;\nflex-wrap: wrap;\ngap: 15px;\njustify-content: center;\nmargin-bottom: 20px;\n`\nexport const CastItem = styled.li`\nbox-shadow: 0px 3px 0px 0px rgba(0, 0, 0, 0.2);\ntext-align: center;\n:hover{\n    box-shadow: 0px 3px 0px 0px rgb(255,69,0);\n}\n`\nexport const CastTitle = styled.h2`\nwidth: 300px;\nfont-weight: 600;\nfont-size: 28px;\nline-height: 32px;\nmargin-bottom: 8px;\nmargin-top: 8px;\n`\nexport const CastText = styled.p`\nwidth: 300px;\nfont-weight: 500;\nfont-size: 16px;\nline-height: 24px;\ncolor: rgb(255,69,0);\nmargin-bottom: 8px;\n`","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMoviesCast } from 'services/moviesAPI';\nimport { CastList, CastItem, CastTitle, CastText } from './Cast.styled';\nconst CastPage = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchMoviesCast(movieId)\n      .then(setCast)\n      .catch(error => {\n        console.error(error);\n        setCast([]);\n      });\n  }, [movieId]);\n\n  return (\n    <CastList>\n      {cast.map(({ id, profile_path, original_name, character }) => {\n        let imageUrl = `https://image.tmdb.org/t/p/w200/${profile_path}`;\n        try {\n          return (\n            <CastItem key={id}>\n              {profile_path ? (\n                <img\n                  src={imageUrl}\n                  alt={original_name}\n                  width=\"300\"\n                  height=\"450\"\n                />\n              ) : (\n                <img\n                  src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR7RbuAj7zoRZSIDcV_nz2LyZZjwiOETmn7kg&usqp=CAU\"\n                  alt={original_name}\n                  width=\"300\"\n                  height=\"450\"\n                />\n              )}\n              <CastTitle>{original_name}</CastTitle>\n              <CastText>Character: {character}</CastText>\n            </CastItem>\n          );\n        } catch (error) {\n          console.error(error);\n          return null;\n        }\n      })}\n    </CastList>\n  );\n};\nexport default CastPage;\n","import axios from 'axios';\nconst KEY = '9016e2013ea080320685a54b31899448';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchMovies() {\n  const response = await axios(`trending/all/day`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMoviesBySearch(query) {\n  const response = await axios(`search/movie?query=${query}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMoviesById(id) {\n  const response = await axios(`movie/${id}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n}\nexport async function fetchMoviesCast(id) {\n  const response = await axios(`movie/${id}/credits?`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data.cast;\n}\nexport async function fetchMoviesReview(id) {\n  const response = await axios(`movie/${id}/reviews?`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n}"],"names":["CastList","styled","CastItem","CastTitle","CastText","useState","cast","setCast","movieId","useParams","useEffect","fetchMoviesCast","then","catch","error","console","map","id","profile_path","original_name","character","imageUrl","src","alt","width","height","KEY","fetchMovies","axios","params","api_key","response","data","fetchMoviesBySearch","query","fetchMoviesById","fetchMoviesReview"],"sourceRoot":""}